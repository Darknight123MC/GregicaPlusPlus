buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'MixinGradle'
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
            classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version "1.1.+"
}

apply plugin: 'org.spongepowered.mixin'


group = 'me.oganesson'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'gregica'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                gregica {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                gregica {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = 'https://cursemaven.com/'
    }
    maven {
        url = 'https://maven.blamejared.com'
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    flatDir {
        dir 'libs'
    }
    maven {
        url = 'https://maven.cleanroommc.com'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'



    implementation fg.deobf("curse.maven:code-chicken-lib-1-8-242818:2779848")

    implementation "mezz.jei:jei_1.12.2:${jei_version}"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crt_version}"
    implementation fg.deobf("curse.maven:top-${top_pid}:${top_fid}")
    implementation fg.deobf("curse.maven:ctm-${ctm_pid}:${ctm_fid}")
    implementation fg.deobf("curse.maven:groovyscript-${grs_pid}:${grs_fid}")
    implementation fg.deobf("curse.maven:ae2-extended-life-${ae2_pid}:${ae2_fid}")
    implementation fg.deobf("maven.modrinth:endercore:0.5.76")

    implementation fg.deobf("maven.modrinth:gregtech-ce-unofficial:${ceu_version}")
    //implementation fg.deobf("libs:gregtech-1.12.2:2.5.4-beta")
    implementation fg.deobf("curse.maven:gregicality-multiblocks-564858:${gcym_version}")

    implementation fg.deobf("curse.maven:thaumcraft-223628:2629023")
    implementation fg.deobf("curse.maven:baubles-227083:2518667")

    implementation "zone.rong:mixinbooter:${mixinbooter_version}"
    compileOnly (files("libs/EnderCore-1.12.2-0.5.76.jar"))
    compileOnly 'curse.maven:AdvancedRocketry-236542:3801020'

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
        mergetool
    }
}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "gregica",
                "Specification-Vendor"    : "Oganesson897",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Oganesson897",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}